//{ Driver Code Starts
import java.io.*;
import java.util.*;

class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);
        
        return a;
    }
    
    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
    
    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int n; 
            n = Integer.parseInt(br.readLine());
            
            
            int[] price = IntArray.input(br, n);
            
            Solution obj = new Solution();
            int res = obj.maxProfit(n, price);
            
            System.out.println(res);
            
        }
    }
}

// } Driver Code Ends

class Solution {
    public static int maxProfit(int n, int[] price) {
        
        int max = price[n-1];
        
        //make a new array to store profits in it, but for start initialize it with 0.
        
        int[] profit = new int[n];
        
        for(int p = 0; p < n; p++){
            
            profit[p] = 0;
        }
        
        //iterate from right to left to get the maximum possible profit from right side.
        
        for(int index = n-2; index >= 0; index--){
            
            
            if(max < price[index]){
                
                max = price[index];
            }
            
            profit[index] = Math.max(profit[index+1], max-price[index]);
        }
        
        //iterate from left to right to get the maximum profit from left side.
        //while iterating from left to right add the left to right profit in right to left profit.
        
        int min = price[0];
        
        for(int index = 1; index < n; index++){
            
            if(min > price[index]){
                
                min = price[index];
            }
            
            profit[index] = Math.max(profit[index-1], price[index] - min + profit[index]);
        }
        
        //return last index value as it contains total profit from both trades.
        
        return profit[n-1];
    }
}
