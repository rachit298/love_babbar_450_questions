//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.io.*;

public class Main
{
    public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		while(t-->0){
		    String inputLine[] = br.readLine().trim().split(" ");
		    int n = Integer.parseInt(inputLine[0]);
		    int m = Integer.parseInt(inputLine[1]);
		    long arr1[] = new long[n];
		    long arr2[] = new long[m];
		    inputLine = br.readLine().trim().split(" ");
		    for(int i=0; i<n; i++){
		        arr1[i] = Long.parseLong(inputLine[i]);
		    }
		    inputLine = br.readLine().trim().split(" ");
		    for(int i=0; i<m; i++){
		        arr2[i] = Long.parseLong(inputLine[i]);
		    }
		    Solution ob = new Solution();
		    ob.merge(arr1, arr2, n, m);
		    
		    StringBuffer str = new StringBuffer();
		    for(int i=0; i<n; i++){
		        str.append(arr1[i]+" ");
		    }
		    for(int i=0; i<m; i++){
		        str.append(arr2[i]+" ");
		    }
		    System.out.println(str);
		}
	}
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    //Function to merge the arrays.
    public static void merge(long arr1[], long arr2[], int n, int m) 
    {
        //GAP METHOD
        
        int index1 = 0, index2 = 0, gap = n+m;
        
        for(gap = nextGap(gap); gap > 0; gap = nextGap(gap)){
            
            for(index1 = 0; index1 + gap < n; index1++){
                
                if(arr1[index1] > arr1[index1 + gap]){
                    
                    arr1[index1] += arr1[index1 + gap] - (arr1[index1 + gap] = arr1[index1]);
                }
            }
            
            for(index2 = (gap > n) ? (gap-n) : 0; index1 < n && index2 < m; index1++, index2++){
                
                if(arr1[index1] > arr2[index2]){
                    
                    arr1[index1] += arr2[index2] - (arr2[index2] = arr1[index1]);
                }
            }
            
            if(index2 < m){
                
                for(index2 = 0; index2 + gap < m; index2++){
                    
                    if(arr2[index2] > arr2[index2 + gap]){
                        
                        arr2[index2] += arr2[index2 + gap] - (arr2[index2 + gap] = arr2[index2]);
                    }
                }
            }
            
        }
        
    }
    
    public static int nextGap(int gap){
        
        if(gap <= 1){
            return 0;
        }
        
        return (gap/2 + gap%2);
    }
}
