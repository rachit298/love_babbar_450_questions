//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Sorting
{
    public static void main (String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        long t = sc.nextLong();
        
        while(t-- > 0)
        {
            long n = sc.nextLong();
            long arr[] = new long[(int)n];
            
            for(long i = 0; i < n; i++)
             arr[(int)i] = sc.nextLong();
             
            System.out.println(new Solution().inversionCount(arr, n));
            
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        
        long ans = merge_sort(arr, 0, (int)N-1);
        return ans;
    }
    
    static long merge_sort(long[] arr, int left, int right){
        
        long count = 0;
        
        if(left < right){
            
            int mid = (left+right)/2;
            
            long countLeft = merge_sort(arr, left, mid);
            long countRight = merge_sort(arr, mid+1, right);
            long myCount = merge(arr, left, mid+1, right); 
            
            return myCount + countLeft + countRight;
        }
        return count;
    }
    
    static long merge(long[] arr, int left, int mid, int right){
        
        int i = left;
        int j = mid;
        int k = 0;
        long count = 0;
        
        long temp[] = new long[right-left+1];
        
        //while loop puts the elements into temp array as well as count inversions.
        
        while(i < mid && j <= right){
            
            if(arr[i] <= arr[j]){
                temp[k] = arr[i];
                i++;
            }
            else{
                temp[k] = arr[j];
                j++;
                count += mid-i;
            }
            k++;
        }
        
        //place remaining elements into temp
        
        while(i < mid){
            temp[k] = arr[i];
            i++;
            k++;
        }
        while(j <= right){
            temp[k] = arr[j];
            j++;
            k++;
        }
        
        //now put elements of arr into temp array
        
        for(int pos = left, k1=0; pos <= right; pos++, k1++){
            
            arr[pos] = temp[k1];
        }
        
        return count;
    }
}
