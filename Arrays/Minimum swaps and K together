//{ Driver Code Starts
//Initial Template for Java

//Initial Template for Java


/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;


class Array {
    
    // Driver code
	public static void main (String[] args) throws IOException{
		// Taking input using buffered reader
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int testcases = Integer.parseInt(br.readLine());
		
		// looping through all testcases
		while(testcases-- > 0){
		    String line = br.readLine();
		    String[] element = line.trim().split("\\s+");
		    int sizeOfArray = Integer.parseInt(element[0]);
		     
		    int arr [] = new int[sizeOfArray];
		    
		    line = br.readLine();
		    String[] elements = line.trim().split("\\s+");
		    for(int i = 0;i<sizeOfArray;i++){
		        arr[i] = Integer.parseInt(elements[i]);
		    }
		    int K = Integer.parseInt(br.readLine());
		    
		    Complete obj = new Complete();
		    int ans = obj.minSwap(arr, sizeOfArray, K);
		    System.out.println(ans);
		}
	}
}

// } Driver Code Ends


//User function Template for Java


class Complete{
    
    // Function for finding maximum and value pair
    public static int minSwap (int arr[], int n, int k) {
        
        //WINDOW TECHNIQUE
        
        int goodValues = 0, badValues = 0;
        
        //calculate window size
        
        for(int elements : arr){
            
            if(elements <= k){
                
                goodValues++;
            }
        }
        
        //number of bad value in window
        
        for(int index = 0; index < goodValues; index++){
            
            if(arr[index] > k){
                
                badValues++;
            }
        }
        
        //put endOfWindow equals to goodValues to avoid array out of bound error.
        
        int startOfWindow = 0, endOfWindow = goodValues, result = badValues;
        
        while(endOfWindow < n){
            
            //check if value going out of window is good or bad
            
            if(arr[startOfWindow] > k){
                
                badValues--;
            }
            
            //check if value coming in the window is good or bad
            
            if(arr[endOfWindow] > k){
                
                badValues++;
            }
            
            //minimum swaps required is the minimum number of bad values in window
            
            result = Math.min(result, badValues);
            
            //maintaining size of window
            
            startOfWindow++;
            endOfWindow++;
            
        }
        
        return result;
    }
}
