//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine().trim());
        while (tc-- > 0) {
            String[] inputLine;
            inputLine = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);
            int m = Integer.parseInt(inputLine[1]);
            int[][] arr = new int[n][m];
            inputLine = br.readLine().trim().split(" ");
        
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    arr[i][j] = Integer.parseInt(inputLine[i * m + j]);
                }
            }
            int ans = new Solution().rowWithMax1s(arr, n, m);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution {
    int rowWithMax1s(int arr[][], int n, int m) {
        
        /*
        1st approach
        travelling in matrix using path like given below to find answer
        
                  __|
              ___|
            _| 
            
        TC - O(n+m)
        SC - O(1)
        */
        
        int col = m-1;
        int max1sRow = -1;
        
        for(int row = 0; row < n; row++){
            
            while(col >= 0){
                
                if(arr[row][col] == 1){
                    
                    max1sRow = row;
                    col--;
                }
                else{
                    
                    break;
                }
            }    
        } 
        return max1sRow;
    }
}

/*
    2nd approach
    using Binary search
    TC - O(n*logm)
    SC - O(1)

        int max1sRow = -1;
        int count = Integer.MIN_VALUE;
        
        for(int row = 0; row < n; row++){
            
            int low = 0, high = m-1;
            
            while(low <= high){
                
                int mid = low + (high-low)/2;
                
                if(arr[row][mid] == 1){
                    
                    if(m-mid > count){
                        
                        count = Math.max(count, (m-mid));
                        max1sRow = row;
                    }
                        
                    high = mid-1;
                }
                else{
                    
                    low = mid+1;
                }
            }
            
            if(count == m){
                break;
            }
        }
        
        return max1sRow;
*/
