//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;


class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            String S[] = read.readLine().split(" ");
            int R = Integer.parseInt(S[0]);
            int C = Integer.parseInt(S[1]);
            int matrix[][] = new int[R][C];
            int c = 0;
            for(int i = 0; i < R; i++){
                String line[]=read.readLine().trim().split(" ");
                for(int j = 0; j < C; j++){
                    matrix[i][j] = Integer.parseInt(line[j]);
                }
            }
            Solution ob = new Solution();
            int ans = ob.median(matrix, R, C);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution {
    int median(int matrix[][], int R, int C) {
        
        //IMPORTANT PROBLEM 
        //BINARY SEARCH
        
        int low = 1, high = 2000;
        int n = matrix.length;
        int m = matrix[0].length;
        
        while(low <= high){
            
            int mid = (high+low)/2;
            int count = 0;
            
            for(int index = 0; index < n; index++){
                
                count += countSmallerThanMid(matrix[index], mid, m);
            }
            
            if(count <= (n*m)/2) low = mid+1;
            else if(count > (n*m)/2) high = mid-1;
        }
        return low;
    }
    
    int countSmallerThanMid(int[] row, int mid, int col){
        
        int low = 0, high = col-1;
        
        while(low <= high){
            
            int midOfRow = (high+low)/2;
            
            if(row[midOfRow] <= mid){
                
                low = midOfRow+1;
            }
            else{
                
                high = midOfRow-1;
            }
        }
        
        return low;
    }
}
