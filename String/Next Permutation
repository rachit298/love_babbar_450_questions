//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int N = Integer.parseInt(in.readLine());
            String a[] = in.readLine().trim().split("\\s+");
            int arr[] = new int[N];
            for(int i = 0;i < N;i++)
                arr[i] = Integer.parseInt(a[i]);
            
            Solution ob = new Solution();
            List<Integer> ans = new ArrayList<Integer>();
            ans = ob.nextPermutation(N, arr);
            StringBuilder out = new StringBuilder();
            for(int i = 0;i < N;i++)
                out.append(ans.get(i) + " ");
            System.out.println(out);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution{
    static List<Integer> nextPermutation(int N, int arr[]){
        
        int index = arr.length-2;
        
        while(index >= 0 && arr[index] >= arr[index+1]) index--;
        
        if(index >= 0){
            
            nextLargeNum(index, arr);
        }
        reverse(index+1, arr.length-1, arr);
    
        List<Integer> li = new ArrayList<>();
        for(int i : arr){
            li.add(i);
        }
        
        return li;
    }
    
    static void nextLargeNum(int numIndex, int[] arr) {

		int index = arr.length - 1;
		while (index >= 0 && arr[index] <= arr[numIndex]) index--;
		
		swap(numIndex, index, arr);
	}

	static void reverse(int index1, int index2, int[] arr) {
		while (index1 < index2) {
			swap(index1, index2, arr);
			index1++;
			index2--;
		}
	}

	static void swap(int index1, int index2, int[] arr) {
		arr[index1] += arr[index2] - (arr[index2] = arr[index1]);
	}
}
