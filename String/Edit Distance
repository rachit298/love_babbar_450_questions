//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String s1 = br.readLine();
            String[] S = s1.split(" ");
            String s = S[0];
            String t = S[1];
            Solution ob = new Solution();
            int ans = ob.editDistance(s, t);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


class Solution {
    public int editDistance(String s, String t) {
        
        int n = s.length();
		int m = t.length();

		int[][] dp = new int[n + 1][m + 1];

		for (int col = 0; col <= m; col++) {
			dp[0][col] = col;
		}

		for (int row = 0; row <= n; row++) {
			dp[row][0] = row;
		}
    
		for(int row = 1; row <= n; row++){
			for(int col = 1; col <= m; col++){

				if(s.charAt(row-1) == t.charAt(col-1)){
					dp[row][col] = dp[row-1][col-1];
				}
				else{
        //add '1' cause we are doing one operation thoeratically from among three
        //insert, delete and replace.
        //take minimum value from three places indicating different operations
        //as shown below
        
					dp[row][col] = 1 + Math.min(Math.min(dp[row-1][col], dp[row][col-1]), dp[row-1][col-1]);
				}
			}
		}

		return(dp[n][m]);
    }
}
